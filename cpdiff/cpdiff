#!/bin/bash

# cpdiff.sh is an utility to copy files that are modified from dev system to
#   test system for testing.
# Prerequisites: The repo should be a git repository

SAMPLE_CONFIG='
{
  "dev_system": "abhijith@10.81.78.230",
  "ssh": {
    "ConnectTimeout": 10
  },
  "repo_path": "/workspace/",
  "replace_path_patterns": [
    {
      "source": "test",
      "destination": "/tmp"
    },
    {
      "source": "unix/common",
      "destination": "/opt/VRTSnas"
    }
  ]
}
'

myprog = $(basename $0)
function usage() {
    cat <<"EOF"
${myprog} - copy files with diff from a git repo on dev system to the current system.

Usage:

    ${myprog} [-g] 

Where,
    NOPARAMS    When no parameters are given, ${myprog} will copy files with
                diff from a git repo by reading details from 
                ${CPDIFF_JSON_CONF_FILE}.
    -g          Generates a cpdiff.conf.json with dev_system, repo_path and 
                other optional info:

    CPDIFF_JSON_CONF_FILE:
        To customize the conf file, set environment variable "CPDIFF_JSON_CONF_FILE" to the path of the config file.
        i.e., set CPDIFF_JSON_CONF_FILE=<path-to-conf>

Config file example:

$ cat cpdiff.conf.json
EOF
    echo "${SAMPLE_CONFIG}" | jq 
}

function getDestinationPath() {
    file=$1
    dest_path=${file}
    dest_path=$(jq -c '.replace_path_patterns[]' ${CPDIFF_JSON_CONF_FILE} | while read i; do
        src_path_pattern=$(echo ${i} | jq -r ".source")
        dest_path_pattern=$(echo ${i} | jq -r ".destination")
        if [[ -z "${src_path_pattern}" ]]; then
            continue
        fi
        if [[ ${file} == *${src_path_pattern}* ]]; then
            echo $(echo ${file} | sed s%${src_path_pattern}%${dest_path_pattern}%)
            break
        fi
    done)
    echo ${dest_path}
}

if [ "$1" == "-h" ]; then
    usage
    exit 0
fi

if [ "$1" == "-g" ]; then
    CPDIFF_JSON_CONF_FILE="cpdiff.conf.json"
    echo "Generating sample config ${CPDIFF_JSON_CONF_FILE}..."
    echo "${SAMPLE_CONFIG}" | jq  > ${CPDIFF_JSON_CONF_FILE};
    echo "Make sure to update the config with your system, repo and any optional details."
    echo
    exit 0
fi

if [ -z ${CPDIFF_JSON_CONF_FILE} ]; then
    echo "WARNING: CPDIFF_JSON_CONF_FILE ENV variable not set."
    echo "Assuming default config file."
    echo "To customize, set CPDIFF_JSON_CONF_FILE=<conf-file.json>"
    echo "CPDIFF_JSON_CONF_FILE=\"cpdiff.conf.json\""
    echo
    CPDIFF_JSON_CONF_FILE="cpdiff.conf.json"
fi

if [ ! -e ${CPDIFF_JSON_CONF_FILE} ]; then
    echo "ERROR: ${CPDIFF_JSON_CONF_FILE} conf file doesn't exist."
    echo ""
    exit 1
fi
repo_path=$(jq ".repo_path" -r ${CPDIFF_JSON_CONF_FILE})
if [ "${repo_path}" == "null" ]; then
    repo_path="."
fi

my_dev=$(jq ".dev_system" -r ${CPDIFF_JSON_CONF_FILE})
if [ "${my_dev}" == "null" ]; then
    # In case if ${repo_path} doesn't exist on current system, then command
    # will fail and copy files from current directory. (OK for me!)
    pushd ${repo_path}
    files=$(git diff --name-only FETCH_HEAD)
else
    timeout=$(jq ".ssh.ConnectTimeout" -r ${CPDIFF_JSON_CONF_FILE})
    echo "Gathering list of files to copy (Waiting upto ${timeout}s)..."
    files=$(ssh -o ConnectTimeout=${timeout} $my_dev "cd $repo_path; git diff --name-only FETCH_HEAD")
    ret_val=$?
    if [ "${ret_val}" == "255" ]; then
        echo "Failed to get list of files as unable to connect to ${my_dev} system."
        exit 1
    fi
fi

if [ -z "${files}" ]; then
    echo "No files with git diff --name-only found. Nothing to copy."
    exit 0
fi

for file in ${files[@]}; do
    echo "Copying file: ${file}..."
    dest_path=$(getDestinationPath "${file}")
    echo "Destination path: ${dest_path}"

    if [ "${my_dev}" == "null" ]; then
        cp ${file} ${dest_path}
    else
        scp ${my_dev}:${repo_path}/${file} ${dest_path}
    fi
done
if [ "${my_dev}" == "null" ]; then
    popd
fi
